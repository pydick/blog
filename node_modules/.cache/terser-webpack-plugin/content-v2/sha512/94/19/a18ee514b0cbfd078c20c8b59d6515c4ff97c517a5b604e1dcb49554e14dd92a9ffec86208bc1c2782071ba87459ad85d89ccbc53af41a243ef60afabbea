{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{352:function(e,n,a){\"use strict\";a.r(n);var t=a(42),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"刷题-待细化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#刷题-待细化\"}},[e._v(\"#\")]),e._v(\" 刷题(待细化)\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"写-react-vue-项目时为什么要在列表组件中写-key-其作用是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#写-react-vue-项目时为什么要在列表组件中写-key-其作用是什么\"}},[e._v(\"#\")]),e._v(\" 写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"不带有key，并且使用简单的模板，基于这个前提下，可以更有效的复用节点，diff速度来看也是不带key更加快速的，因为带key在增删节点上有耗时。这就是vue文档所说的默认模式。但是这个并不是key作用，而是没有key的情况下可以对节点就地复用，提高性能。这种模式会带来一些隐藏的副作用，比如可能不会产生过渡效果，或者在某些节点有绑定数据（表单）状态，会出现状态错位。VUE文档也说明了 这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出\")]),e._v(\" \"),a(\"li\",[e._v(\"key是给每一个vnode的唯一id,可以依靠key,更准确, 更快的拿到oldVnode中对应的vnode节点。不是就地复用，利用key的唯一性生成map对象来获取对应节点，比遍历方式更快，diff更准确更快\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"聊聊-vue-的双向数据绑定-model-如何改变-view-view-又是如何改变-model-的\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#聊聊-vue-的双向数据绑定-model-如何改变-view-view-又是如何改变-model-的\"}},[e._v(\"#\")]),e._v(\" 聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"<div id=\\\"content\\\">\\n    name: {{name}}<br/>\\n    <input type=\\\"text\\\" v-model = 'name'>\\n  </div>\\n<script>\\n   const el = document.getElementById('content');\\n\\n   const template = el.innerHTML;\\n   \\n   const _data = {\\n     name: 'mark',\\n   }\\n\\n   //new Proxy(target, handler);\\n   let changeName = new Proxy(_data, {\\n     set(obj, name, value){\\n       obj[name] = value;\\n       render()\\n     }\\n\\n   })\\n   render();\\n   function render(){\\n     el.innerHTML = template.replace(/\\\\{\\\\{\\\\w+\\\\}\\\\}/g, str=>{\\n       str = str.substring(2, str.length-2);\\n       return _data[str];\\n     }) \\n     Array.from(el.getElementsByTagName('input')).filter(ele => {\\n       return ele.getAttribute('v-model');\\n     }).forEach(input=>{\\n       let name = input.getAttribute('v-model');\\n       input.value = changeName[name];\\n       input.oninput = function(){\\n         changeName[name] = this.value;\\n       }\\n     })\\n   }\\n \\n <\\/script>\\n\")])]),e._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"24\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"25\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"26\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"27\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"28\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"29\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"30\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"31\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"32\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"33\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"34\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"35\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"36\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"37\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"38\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[e._v(\"39\")]),a(\"br\")])]),a(\"h3\",{attrs:{id:\"virtual-dom-真的比操作原生-dom-快吗-谈谈你的想法。-理解瞅瞅就好了\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#virtual-dom-真的比操作原生-dom-快吗-谈谈你的想法。-理解瞅瞅就好了\"}},[e._v(\"#\")]),e._v(\" Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。(理解瞅瞅就好了)\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[e._v(\"原生 DOM 操作 vs. 通过框架封装操作。\\n这是一个性能 vs. 可维护性的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。\")])]),e._v(\" \"),a(\"li\",[a(\"p\",[e._v(\"对 React 的 Virtual DOM 的误解。\\nReact 从来没有说过 “React 比原生操作 DOM 快”。React 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 Virtual DOM，简单来想就是直接重置 innerHTML。很多人都没有意识到，在一个大型列表所有数据都变了的情况下，重置 innerHTML 其实是一个还算合理的操作... 真正的问题是在 “全部重新渲染” 的思维模式下，即使只有一行数据变了，它也需要重置整个 innerHTML，这时候显然就有大量的浪费。\")])])]),e._v(\" \"),a(\"p\",[e._v(\"我们可以比较一下 innerHTML vs. Virtual DOM 的重绘性能消耗：\")]),e._v(\" \"),a(\"p\",[e._v(\"innerHTML: render html string O(template size) + 重新创建所有 DOM 元素 O(DOM size)\\nVirtual DOM: render Virtual DOM + diff O(template size) + 必要的 DOM 更新 O(DOM change)\\nVirtual DOM render + diff 显然比渲染 html 字符串要慢，但是！它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然便宜了太多。可以看到，innerHTML 的总计算量不管是 js 计算还是 DOM 操作都是和整个界面的大小相关，但 Virtual DOM 的计算量里面，只有 js 计算和界面大小相关，DOM 操作是和数据的变动量相关的。前面说了，和 DOM 操作比起来，js 计算是极其便宜的。这才是为什么要有 Virtual DOM：它保证了 1）不管你的数据变化多少，每次重绘的性能都可以接受；2) 你依然可以用类似 innerHTML 的思路去写你的应用。\")]),e._v(\" \"),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[e._v(\"MVVM vs. Virtual DOM\\n相比起 React，其他 MVVM 系框架比如 Angular, Knockout 以及 Vue、Avalon 采用的都是数据绑定：通过 Directive/Binding 对象，观察数据变化并保留对实际 DOM 元素的引用，当有数据变化时进行对应的操作。MVVM 的变化检查是数据层面的，而 React 的检查是 DOM 结构层面的。MVVM 的性能也根据变动检测的实现原理有所不同：Angular 的脏检查使得任何变动都有固定的\\nO(watcher count) 的代价；Knockout/Vue/Avalon 都采用了依赖收集，在 js 和 DOM 层面都是 O(change)：\")])]),e._v(\" \"),a(\"p\",[e._v('脏检查：scope digest O(watcher count) + 必要 DOM 更新 O(DOM change)\\n依赖收集：重新收集依赖 O(data change) + 必要 DOM 更新 O(DOM change)可以看到，Angular 最不效率的地方在于任何小变动都有的和 watcher 数量相关的性能代价。但是！当所有数据都变了的时候，Angular 其实并不吃亏。依赖收集在初始化和数据变化的时候都需要重新收集依赖，这个代价在小量更新的时候几乎可以忽略，但在数据量庞大的时候也会产生一定的消耗。\\nMVVM 渲染列表的时候，由于每一行都有自己的数据作用域，所以通常都是每一行有一个对应的 ViewModel 实例，或者是一个稍微轻量一些的利用原型继承的 \"scope\" 对象，但也有一定的代价。所以，MVVM 列表渲染的初始化几乎一定比 React 慢，因为创建 ViewModel / scope 实例比起 Virtual DOM 来说要昂贵很多。这里所有 MVVM 实现的一个共同问题就是在列表渲染的数据源变动时，尤其是当数据是全新的对象时，如何有效地复用已经创建的 ViewModel 实例和 DOM 元素。假如没有任何复用方面的优化，由于数据是 “全新” 的，MVVM 实际上需要销毁之前的所有实例，重新创建所有实例，最后再进行一次渲染！这就是为什么题目里链接的 angular/knockout 实现都相对比较慢。相比之下，React 的变动检查由于是 DOM 结构层面的，即使是全新的数据，只要最后渲染结果没变，那么就不需要做无用功。')]),e._v(\" \"),a(\"p\",[e._v(\"Angular 和 Vue 都提供了列表重绘的优化机制，也就是 “提示” 框架如何有效地复用实例和 DOM 元素。比如数据库里的同一个对象，在两次前端 API 调用里面会成为不同的对象，但是它们依然有一样的 uid。这时候你就可以提示 track by uid 来让 Angular 知道，这两个对象其实是同一份数据。那么原来这份数据对应的实例和 DOM 元素都可以复用，只需要更新变动了的部分。或者，你也可以直接 track by $index 来进行 “原地复用”：直接根据在数组里的位置进行复用。在题目给出的例子里，如果 angular 实现加上 track by $index 的话，后续重绘是不会比 React 慢多少的。甚至在 dbmonster 测试中，Angular 和 Vue 用了 track by $index 以后都比 React 快: dbmon (注意 Angular 默认版本无优化，优化过的在下面）\")]),e._v(\" \"),a(\"p\",[e._v(\"顺道说一句，React 渲染列表的时候也需要提供 key 这个特殊 prop，本质上和 track-by 是一回事。\")]),e._v(\" \"),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[e._v(\"性能比较也要看场合\\n在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。Virtual DOM、脏检查 MVVM、数据收集 MVVM 在不同场合各有不同的表现和不同的优化需求。Virtual DOM 为了提升小量数据更新时的性能，也需要针对性的优化，比如 shouldComponentUpdate 或是 immutable data。\")])]),e._v(\" \"),a(\"p\",[e._v(\"初始渲染：Virtual DOM > 脏检查 >= 依赖收集\\n小量数据更新：依赖收集 >> Virtual DOM + 优化 > 脏检查（无法优化） > Virtual DOM 无优化\\n大量数据更新：脏检查 + 优化 >= 依赖收集 + 优化 > Virtual DOM（无法/无需优化）>> MVVM 无优化\\n不要天真地以为 Virtual DOM 就是快，diff 不是免费的，batching 么 MVVM 也能做，而且最终 patch 的时候还不是要用原生 API。在我看来 Virtual DOM 真正的价值从来都不是性能，而是它 1) 为函数式的 UI 编程方式打开了大门；2) 可以渲染到 DOM 以外的 backend，比如 ReactNative。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"在-vue-中-子组件为何不可以修改父组件传递的-prop-如果修改了-vue-是如何监控到属性的修改并给出警告的。\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在-vue-中-子组件为何不可以修改父组件传递的-prop-如果修改了-vue-是如何监控到属性的修改并给出警告的。\"}},[e._v(\"#\")]),e._v(\" 在 Vue 中，子组件为何不可以修改父组件传递的 Prop，如果修改了，Vue 是如何监控到属性的修改并给出警告的。\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"单向数据流，易于监测数据的流动，出现了错误可以更加迅速的定位到错误发生的位置。说白了，单向数据流，便于维护\")]),e._v(\" \"),a(\"li\",[e._v(\"修改了，Vue 会监控到属性的修改并给出警告的。\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"vue-如何优化首页的加载速度-vue-首页白屏是什么问题引起的-如何解决呢\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue-如何优化首页的加载速度-vue-首页白屏是什么问题引起的-如何解决呢\"}},[e._v(\"#\")]),e._v(\" vue 如何优化首页的加载速度？vue 首页白屏是什么问题引起的？如何解决呢？\")]),e._v(\" \"),a(\"p\",[e._v(\"首页白屏的原因：\\n单页面应用的 html 是靠 js 生成，因为首屏需要加载很大的js文件(app.js vendor.js)，所以当网速差的时候会产生一定程度的白屏\")]),e._v(\" \"),a(\"p\",[e._v(\"解决办法：\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"vendor.js分割,优化webpack,减少模块打包体积\")]),e._v(\" \"),a(\"li\",[e._v(\"一些依赖用cdn外部托管\")]),e._v(\" \"),a(\"li\",[e._v(\"开启gzip\")]),e._v(\" \"),a(\"li\",[e._v(\"懒加载/按需加载\")]),e._v(\" \"),a(\"li\",[e._v(\"服务端渲染，在服务端事先拼装好首页所需的 html(用于需要seo的项目)\")]),e._v(\" \"),a(\"li\",[e._v(\"首页加 loading\")]),e._v(\" \"),a(\"li\",[e._v(\"骨架屏(...)\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"谈一谈-nexttick-的原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#谈一谈-nexttick-的原理\"}},[e._v(\"#\")]),e._v(\" 谈一谈 nextTick 的原理\")]),e._v(\" \"),a(\"p\",[e._v(\"用途：\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中\")]),e._v(\" \"),a(\"li\",[e._v(\"在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。\\n原理：(待续)\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"v-if、v-show、v-html-的原理是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#v-if、v-show、v-html-的原理是什么\"}},[e._v(\"#\")]),e._v(\" v-if、v-show、v-html 的原理是什么？\")]),e._v(\" \"),a(\"p\",[e._v(\"v-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；\\nv-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；\\nv-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"浏览器输入url后发生了什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器输入url后发生了什么\"}},[e._v(\"#\")]),e._v(\" 浏览器输入URL后发生了什么\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"DNS域名解析ip\")]),e._v(\" \"),a(\"li\",[e._v(\"建立TCP连接\")]),e._v(\" \"),a(\"li\",[e._v(\"发送HTTP请求\")]),e._v(\" \"),a(\"li\",[e._v(\"服务器处理请求\")]),e._v(\" \"),a(\"li\",[e._v(\"返回响应结果\")]),e._v(\" \"),a(\"li\",[e._v(\"关闭TCP连接\")]),e._v(\" \"),a(\"li\",[e._v(\"浏览器解析HTML\")]),e._v(\" \"),a(\"li\",[e._v(\"浏览器布局渲染\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"网站性能优化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网站性能优化\"}},[e._v(\"#\")]),e._v(\" 网站性能优化\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"大文件大模块分割\")]),e._v(\" \"),a(\"li\",[e._v(\"gzip 文本压缩\")]),e._v(\" \"),a(\"li\",[e._v(\"图片压缩\")]),e._v(\" \"),a(\"li\",[e._v(\"图片转iconfont字体\")]),e._v(\" \"),a(\"li\",[e._v(\"csdn 托管资源\")]),e._v(\" \"),a(\"li\",[e._v(\"ngnix 反向代理，负载均衡\")]),e._v(\" \"),a(\"li\",[e._v(\"http 请求优化\")])])])}),[],!1,null,null,null);n.default=s.exports}}]);","extractedComments":[]}